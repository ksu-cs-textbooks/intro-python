




	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
[
  {
    "content": "Chapter 1 Basic Python ",
    "description": "",
    "tags": null,
    "title": "Basic Python",
    "uri": "/01-basic-python/"
  },
  {
    "content": "YouTube Video\nWe’ve chosen Python because it is very easy to learn, easy to use, and it is used in many different places, from scientific computing and data analysis to web servers and even artificial intelligence. It is a very useful language to learn, and it makes a great first programming language.\nLearning to program involves learning not only the syntax and rules of a new language, but also a new way of thinking. Not only do we want to write code that is understandable by the computer, we must also understand what the computer will do when it tries to run that code.\nA key part of that is learning to think like a computer thinks. We sometimes call this our “mental model” of a computer. If we have a good “mental model” of a computer, then we can learn to read code and mentally predict what it will do, even without ever running it on an actual computer. This ability is crucial for programmers to develop.\nSo, as we work through this lab, we’ll need to constantly pay attention to how a real computer works, and make sure that our “mental model” is accurate. If not, we’ll have to adapt our understanding of a computer to match the real world. This process of adaptation and accommodation is an important part of learning to program - we have to have a good understanding of what a computer actually does when it runs our code, or else we won’t be able to write code that will do what we want it to do.\nAs we learn to write code in a real programming language, it helps to refer to the actual documentation from time to time. So, we recommend bookmarking the official Python Documentation as a great place to start. Throughout this course, we may also include links to additional resources, and those are also worth bookmarking. One of the best parts about programming is that nearly all of the documentation is online and easily accessible, and learning how to quickly search for a particular solution or reference is just as useful as knowing how to do it from memory. In fact, most programmers really only know the basics of the language and a few handy tricks, and the rest of it is just reading documentation and learning when to use it. So, don’t worry about remembering it all right from the start - instead, learn to read the documentation and use the tools that are available, and focus on understanding the basics of the language’s syntax and rules.\n",
    "description": "",
    "tags": null,
    "title": "Learning to Program",
    "uri": "/01-basic-python/01-learning-to-program/"
  },
  {
    "content": "YouTube Video\nFirst, let’s start with the basics of writing Python code in a file and running those files. This is the first major step toward actually writing a real program, but it can definitely be difficult the first time without prior experience to rely on. So, let’s go through it step by step and make sure we know how to run our programs in Python.\nAt this point, we should already have Python installed on our system. For students using Codio, this is taken care of already. For students using their own computers, refer to an earlier lab to find instructions for installing Python on your system, or contact the instructors for assistance.\nTo make sure that Python is installed and working, we’ll need to open a terminal in our operating system. In Codio, this can be found by clicking the Tools menu at the top, and then choosing Terminal. More information can be found in the Codio Documentation. There may also already be one open for you if you are reading this content from within Codio.\nIf you are working on your own computer, you’ll need to open a terminal on your operating system. This should have been covered in the previous lab when you installed Python. On Windows, look for Windows Terminal or Windows PowerShell (not the old Command Prompt, which requires different commands). On Mac or Linux, look for an application called Terminal. Throughout this course, we’ll call these windows the terminal, even though they may have slightly different names in each operating system.\nOnce we have the terminal open, we should see something like one of these examples:\nAt this point, we should see a place with a blinking cursor, where we can type our commands. This is called the command prompt in the terminal. The first thing we can do is check to make sure Python is properly installed, and we can also confirm that it is the correct version. To do this, we’ll enter the following command and press enter to execute it:\npython3 --version Hopefully, that command should produce some output that looks like this:\nHere, we see that the currently installed Python version is 3.6.9. As long as your Python version number begins with a 3, you have correctly installed Python and are able to run it from the terminal. So, we can continue to the next part of this lab.\nIf you aren’t able to run Python or aren’t sure that you have the correct version, contact the instructor for assistance!\nPython 2 vs. Python 3 Notice that we have to use the command python3, including the version number, instead of the simpler python command here. This is because some systems may also have Python version 2, an outdated version of Python, installed alongside version 3. In that case, the simple python command will be Python version 2, while python3 will be Python version 3. Unfortunately, most programs written in Python 3 will not run properly in Python 2, so it is important for us to make sure we are using the correct Python version when running our programs.\nThankfully, the command python3 should always work, and using that command is a good habit to learn. So, throughout this course, we will use the command python3 to run Python programs.\nNavigating in the Terminal When we open a terminal, it will usually start in our user’s home folder. This may mean different locations for different operating systems. For example, if our current user’s name is \u003cusername\u003e, the terminal will usually start in this location for each operating system:\nWindows: C:\\Users\\\u003cusername\u003e Linux: /home/\u003cusername\u003e Mac: /Users/\u003cusername\u003e Codio: /home/codio/workspace The directory that is open in the terminal is known as the working directory. We can use the pwd command to determine what our current directory is:\nIn this example, we are looking at the Codio terminal, so our working directory is /home/codio/workspace.\nNext, we can see the files and directories contained in that directory using the ls command. Here’s the output of running this command in Codio:\nIn the output, we can see that there is a file named README.txt and a directory named python. In Codio, we’ll place all of our files in the python directory, so we can open that using the cd python command:\nNotice how the python directory is now included in the command prompt in the terminal. Most terminals will show the working directory in the command prompt in some way.\nThat’s the basics of navigating in the terminal, but there is much more to learn. If you’d like to know more, consider checking out some of the resources linked below!\nResources Basic Linux Navigation \u0026 File Management from DigitalOcean Beginner’s Guide to the Bash Terminal by Joe Collins on YouTube Windows \u0026 Mac Terminal Most of the content in this course will focus on using the commands that are present in the Linux terminal, since they are the most widely-used commands across all platforms. In general, these commands should work well on both Windows and Mac, with a few caveats:\nOn Windows, there is an older Command Prompt tool that does not support the newer Linux commands. Therefore, we won’t be using it. Instead, we only want to use Windows PowerShell, which supports most of the basic Linux commands via aliases to similar PowerShell commands. We can also install the Windows Terminal application for a more modern interface. Windows users may also choose to install the Windows Subsystem for Linux (WSL) to run Linux (such as Ubuntu) directly within Windows. Many developers choose to pursue this option, as it provides a clean and easy to use development environment that is compatible with the Linux operating system. The Mac operating system includes a terminal that uses either ZSH (since OS X 10.15) or Bash (OS X 10.14 and below). This terminal is very similar to the Linux terminal when it comes to navigating the file system and executing programs, which is sufficient for this course. Fully learning how to use these tools is outside of the scope of this class, but we need to know enough to navigate the filesystem and execute the python3 command. If you need assistance getting started with this step, your best bet is to contact the instructors. Each student’s computer is a bit different, so it is difficult to cover all possible cases here.\n",
    "description": "",
    "tags": null,
    "title": "Working in the Terminal",
    "uri": "/01-basic-python/02-working-in-terminal/"
  },
  {
    "content": "YouTube Video\nFirst, let’s start by introducing some important vocabulary terms:\nstring: A string in programming is any text that is stored as a value. We typically represent strings by placing them inside double quotes \"\" in our code and elsewhere. value: A value is a piece of data that our program is storing and manipulating. In our pseudocode, values consist of either numbers or strings. keyword: A keyword is a reserved word in a programming language that defines a particular statement, expression, structure, or other use. As we’ll learn later, we cannot use these keywords as variable or procedure names. statement: A statement refers to a piece of code that performs an action, but doesn’t result in any value. Most complete lines of code are considered statements. expression: An expression, on the other hand, is a piece of code that, when evaluated, will result in a value that can be used or stored. An expression can even contain multiple expressions inside of it! Now that we have learned a few of the important terms used in programming, we can start to discuss the various statements in Python.\nThe first statement that we’ll cover in the Python programming language is the print(expression) statement. This statement is used to display output to the user via the terminal. So, when Python runs this statement, it will evaluate the expression to a single value, and then print that value to the terminal.\nFor example, the simplest Python code would be a simple Hello World program, where we use the print(expression) statement to display the text \"Hello World\" to the user:\nprint(\"Hello World\") Notice that the expression part of the statement contains \"Hello World\" in quotation marks? That is because \"Hello World\" is text, so we should put it in quotes and make it into a string in our code. Also, since the string \"Hello World\" can be treated like a value, we can also say it is an expression, and therefore we can use it in the expression part of the statement. This may seem pretty straightforward now, but as our programs become more complex it is important to think about what pieces of code can be treated as values, expressions, and statements.\nWhen we run that program in Python, we’ll see the following output:\nHello World If you look at the output, you might notice something strange - the text on our user interface doesn’t include the quotation marks \"\" that the expression \"Hello World\" contained. When we display text to the user, Python will remove the quotation marks from the beginning and the end of the string, and just display the text inside. Pretty handy!\nLet’s go through the full process of writing and running that program in Python!\nWriting a Python Program The first step to create a program in Python is to create a text file to store the code. This file should have the file extension .py to indicate that it is a Python program. So, we’ll need to create that file either on our computers or in Codio or another tool if we are using one. For example, in Codio we can create the file in the python folder by right-clicking on it and selecting the New File option. We’ll name the file hello.py:\nOnce we’ve created that file, we can then open it by clicking on it. In Codio and in other online tools, it will open in the built-in editor. On a computer, we’ll need to open it in a text editor specifically designed for programming. We recommend either Atom or Visual Studio Code, which are available on all platforms. Tools like the built-in Notepad tool on Windows, or a word processor like Word or Pages do not work for this task.\nIn that file, we’ll simply place the code shown above, like this:\nThat’s all there is to it!\nRunning a Python Program Once we’ve written the code, we can open the Terminal and navigate to where the code is stored in order to run the program. On Codio, we’ll just use the cd python command to enter the python directory. On a computer, we’ll need to navigate the file system to find the location where we placed our code. We highly recommend creating a folder directly within the home directory and placing all of our code there - that will make it easy to find!\nOnce we are in the correct directory, we can use the ls command to see the contents of that directory. If we see our hello.py file, we are in the correct location:\nIf we don’t see our file, we should make sure we’ve saved it and that our current working directory is the same location as where the file is stored.\nFinally, we can execute the file in Python using the python3 command, followed by the name of the file:\npython3 hello.py If everything works correctly, we should see output similar to this:\nThere we go! We’ve just run our first program in Python! That’s a great first step to take.\nOf course, there are lots of ways that this could go wrong. So, if you run into any issues getting this to work, please take the time to contact an instructor and ask for assistance. This process can be daunting the first time, since there are so many things to learn and so many intricacies we simply don’t have time to cover up front. Don’t be afraid to ask for help!\n",
    "description": "",
    "tags": null,
    "title": "Print Statement",
    "uri": "/01-basic-python/03-print-statement/"
  },
  {
    "content": "YouTube Video\nThe print(expression) statement in Python works in much the same way as the DISPLAY(expression) statement in pseudocode, but with one major difference. In pseudocode, the DISPLAY(expression) statement will print the value from the expression to the user, but it won’t add anything like a space or newline to the end. In Python, however, the print(expression) statement will add a newline to the end of the output by default. This means that multiple print(expression) statements will print on multiple lines. Let’s look at some examples!\nThroughout this course, we’ll show many different code examples and their output here in the lab. To test them out, feel free to copy the code examples to a Python file and run it yourself. You can even tweak them to do something new and see how Python interprets different pieces of code. In the end, the best way to learn programming is to explore, and running these examples on your own is a great way to get started!\nExample 1 - Multiple Statements First, let’s write a simple program that prints 4 letters separated by spaces:\nDISPLAY(\"a b c d\") Just like our “Hello World” program, when we run this program, we’ll see that string printed in the user interface:\na b c d Ok, that makes sense based on what we’ve previously seen. The DISPLAY(expression) statement will simply display any string expression in our user interface.\nOf course, programs can consist of multiple statements or lines of code. So, what if we write a program that contains multiple DISPLAY(expression) statements, like this one:\nDISPLAY(\"one\") DISPLAY(\"two\") DISPLAY(\"three\") DISPLAY(\"four\") What do you think will happen when we try to execute this program on our “mental model?” Have we learned a rule that tells us what should happen yet? Recall on the previous page we learned that it will print the value on the user interface, but that’s it. So, when we execute this program, we’ll see the following output:\nonetwothreefour That’s a very interesting result! We might expect that four lines of code would produce four lines of output, but in fact they are all printed on the same line! This is very helpful, since we can use this to construct more complex sentences of output by using multiple DISPLAY(expression) statements.\nIf we want to add spaces between each line, we’ll need to include that in our expressions somehow. For example, we could rewrite the program like this:\nDISPLAY(\"one \") DISPLAY(\"two \") DISPLAY(\"three \") DISPLAY(\"four\") Notice that there is now a space inside of the quotation marks on the first three statements? That will result in this output:\none two three four There are many other ways we could accomplish this, but this is probably the simplest to learn.\nExample 2 - Multiple Lines What if we want to print output on multiple lines? How can we do that? In this case, we need to introduce a special symbol, the newline symbol. In our pseudocode, as in most programming languages, the newline symbol is represented by a backslash followed by the letter “n”, like \\n, in a string. When our user interface sees a newline symbol, it will move to the next line before printing the rest of the string. The newline symbol itself won’t appear in our output.\nFor example, we can update our previous program to contain newline symbols between each letter:\nDISPLAY(\"a\\nb\\nc\\nd\") This might be a bit difficult to read at first, but as we become more and more familiar with reading code, we’ll start to see special symbols like the newline symbol just like any other letter. For now, we’ll just have to read closely and make sure we are on the lookout for special symbols in our text.\nWhen we run this program in our “mental model” of a computer, we should see the following output on our user interface:\na b c d There we go! We’ve now figured out how to print text on multiple lines.\nExample 3 - Multiple Statements on Multiple Lines We can even extend this to multiple statements! For example, we can update another one of our previous programs to print each statement on a new line by simply adding a newline character to the end of each string:\nDISPLAY(\"one\\n\") DISPLAY(\"two\\n\") DISPLAY(\"three\\n\") DISPLAY(\"four\") When we execute this program, we’ll get the following output:\none two three four That’s pretty much all we need to know in order to use the DISPLAY(expression) statement to do all sorts of things in our programs!\nMultiple Lines In Python, we can print multiple lines of output simply by using multiple print(expression) statements:\nprint(\"a\") print(\"b\") print(\"c\") print(\"d\") will result in this output:\na b c d We can also include a newline symbol \\n in a print(expression) statement in Python. This will add a newline to the output, and then the print(expression) statement will add an additional newline at the end of the value that is printed:\nprint(\"one\\ntwo\") print(\"three\\nfour\") will produce this output:\none two three four Printing On the Same Line What if we want to display multiple print(expression) statements on the same line? To do that, we must add an additional option to the print(expression) statement - the end option.\nFor example, the following code will produce output all on the same line:\nprint(\"Hello \", end=\"\") print(\"World!\") In this example, we set end to be an empty string \"\". When we run this program, we’ll get the following output:\nHello World! In fact, in Python, the print(expression) statement is an example of a function in Python. Functions in Python are like procedures in pseudocode - when we call them, we write the name of the function, followed by a set of parentheses and then arguments separated by commas within the parentheses. So, in actuality, the expression in the print(expression) statement is just the first argument when we call the print function.\nTherefore, the end option that we showed above is just a second argument that is optional - it simply let’s us choose what to put at the end of the output. By default, the end parameter is set to the newline symbol \\n, so if we don’t provide an argument for end it will just add a newline at the end of the value.\nWe can set the value of end to be any string. If we want to include a space at the end of the output, we can add end=\" \" to the print function call.\nIn this course, we won’t spend much time talking about optional parameters and default values in Python functions, but it is important to understand that statements like print are actually just Python functions behind the scenes!\n",
    "description": "",
    "tags": null,
    "title": "Using Print",
    "uri": "/01-basic-python/04-using-print/"
  },
  {
    "content": "YouTube Video\nLet’s try some simple practice problems. These problems are not graded - they are just for you to practice before doing the real exercises in the lab itself.\n1 Write the output that is displayed to the user after running the following Python code:\nprint(\"Kansas State University\") print(\"Manhattan \", end=\"\") print(\"KS\", end=\" \") print(\"66506\") print(\"KSU!\\nGo Cats!\") 2 Construct a program using the Python statements below that will produce the following output:\n* * * * * * The correct answer is shown below\ndetails\u003e\nClick here for answers... 5.1. Reading Code The correct output:\nKansas State University Manhattan KS 66506 KSU! Go Cats! 5.2. Constructing Code One possible answer:\nprint(\"*\") print(\"*\", end=\" \") print(\"*\") print(\"*\", end=\" \") print(\"*\", end=\" \") print(\"*\") 5.3. Writing Code One possible answer is shown below:\nprint(\"v\") print(\"w\") print(\"x\") print(\"y\") print(\"z\") Many others are possible\n",
    "description": "",
    "tags": null,
    "title": "Print Practice Problems",
    "uri": "/01-basic-python/05-print-practice-problems/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/"
  },
  {
    "content": "Chapter 0 Introduction Welcome to the Introduction to Python textbook!\n",
    "description": "",
    "tags": null,
    "title": "Introduction",
    "uri": "/00-introduction/"
  },
  {
    "content": "Introduction to Python Textbook This textbook is used by CIS 115, CC 111, CC 711, and the Cyber Pipeline outreach program to teach basic Python programming to first-time programmers.\n",
    "description": "",
    "tags": null,
    "title": "Introduction to Python",
    "uri": "/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/"
  }
]
