




	
	
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
[
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Basic Python",
    "uri": "/01-basic-python/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Numbers \u0026 Math",
    "uri": "/02-numbers/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Strings \u0026 Input",
    "uri": "/03-strings-input/"
  },
  {
    "content": "YouTube Video\nResources Slides The Python programs we’ve written up to this point are very static - each time we run the program, it will perform the same exact operations. Since we’re running these programs on a real computer, it might be helpful to build programs that can read and respond to input from the user, making them much more useful overall. Python includes many different ways to handle user input, but in this lab we’ll just focus on the simple input() function.\nInput in Python The input() function is used to display a prompt the user and then record input. Let’s look at a quick example:\nname = input(\"Enter your name: \") print(\"Hello \", end=\"\") print(name) Here, we see that the input() function actually accepts a message as an argument, which will be displayed to the user. After the message is printed, the user will be given a cursor to enter text immediately after it. Once the user presses the ENTER key, the input() function will read the input that was entered and store it as a string value or str data type in the name variable.\nFor example, if the user inputs Willie Wildcat at the prompt, this program’s output will look like this:\nEnter your name: Willie Wildcat Hello Willie Wildcat We can see this even more clearly in the terminal. When we first run the program, we’ll see the prompt \"Enter your name:\" printed, followed by a cursor prompting the user to enter something:\nOnce the user types the input and presses ENTER, the rest of the program will run:\nNow we see the cursor is at the next command prompt, ready to run another program.\n",
    "description": "",
    "tags": null,
    "title": "Input",
    "uri": "/03-strings-input/01-input/"
  },
  {
    "content": "YouTube Video\nResources Slides So far, we’ve only worked with string values in Python. Strings are a very useful data type in programming languages such as Python, but they are very limited in their use. Recall that a data type simply defines how a particular value is stored in a computer. The str data type is used to store string values in Python.\nPython supports many different data types for handling various data that we’d like to store and manipulate in our programs. In this lab, we’re going to cover the two basic types used for storing numbers in Python, the int or integer type, and the float or floating-point type.\nIntegers In mathematics, an integer is a whole number, such as $ 3 $, $ -5 $, or even $ 0 $. Basically, any positive or negative number that doesn’t include a fractional or decimal portion is a whole number, and therefore it is an integer. In Python, those numbers can be stored in the int data type.\nIn Python, we can store an integer value in a variable using an assignment statement:\nx = 5 That statement will store the integer value $ 5 $ in the variable x. Notice that the value $ 5 $ does not have quotation marks around it. This is because we want to store the integer value $ 5 $ and not the string value \"5\" in the variable. Also, as we learned earlier, this is why we cannot create variable names that begin with a number - since numerical values start with a number, this is how Python can tell the difference between a numerical value and a variable.\nJust like in pseudocode, we can also store negative numbers in a variable by placing a negative symbol - in front of the numerical value:\ny = -8 We’ll need to be careful and make sure that there is a space after the equals sign =, but no space between the negative symbol - and the number after it. Otherwise, the negative symbol could be confused for the minus symbol, which is an operator that we’ll learn about later in this lab.\nIn Python, there is effectively no maximum size for an integer, so we can store any arbitrarily large whole number (either positive or negative) in an int variable.\n",
    "description": "",
    "tags": null,
    "title": "Integers",
    "uri": "/02-numbers/01-integers/"
  },
  {
    "content": "YouTube Video\nResources Slides Learning to program involves learning not only the syntax and rules of a new language, but also a new way of thinking. Not only do we want to write code that is understandable by the computer, we must also understand what the computer will do when it tries to run that code.\nA key part of that is learning to think like a computer thinks. We sometimes call this our “mental model” of a computer. If we have a good “mental model” of a computer, then we can learn to read code and mentally predict what it will do, even without ever running it on an actual computer. This ability is crucial for programmers to develop.\nSo, as we work through this lab, we’ll need to constantly pay attention to how a real computer works, and make sure that our “mental model” is accurate. If not, we’ll have to adapt our understanding of a computer to match the real world. This process of adaptation and accommodation is an important part of learning to program - we have to have a good understanding of what a computer actually does when it runs our code, or else we won’t be able to write code that will do what we want it to do.\nWe’ve chosen Python because it is very easy to learn, easy to use, and it is used in many different places, from scientific computing and data analysis to web servers and even artificial intelligence. It is a very useful language to learn, and it makes a great first programming language.\nAs we learn to write code in a real programming language, it helps to refer to the actual documentation from time to time. So, we recommend bookmarking the official Python Documentation as a great place to start. Throughout this course, we may also include links to additional resources, and those are also worth bookmarking. One of the best parts about programming is that nearly all of the documentation is online and easily accessible, and learning how to quickly search for a particular solution or reference is just as useful as knowing how to do it from memory. In fact, most programmers really only know the basics of the language and a few handy tricks, and the rest of it is just reading documentation and learning when to use it. So, don’t worry about remembering it all right from the start - instead, learn to read the documentation and use the tools that are available, and focus on understanding the basics of the language’s syntax and rules. Let’s get started!\n",
    "description": "",
    "tags": null,
    "title": "Learning to Program",
    "uri": "/01-basic-python/01-learning-to-program/"
  },
  {
    "content": "YouTube Video\nResources Slides The other type of number we can store in Python is a floating-point number. We won’t go into too much detail about floating-point values here, since you’ll learn about them elsewhere in this class. For the purposes of programming, the only thing to know about floating-point numbers is that they are used to represent numbers that include a fractional or decimal portion. In Python, these values are stored in the float data type.\nTo create a variable that stores a floating-point value in Python, we can use an assignment statement that includes a value with a decimal point, like this:\na = 5.8 We can also create negative values using the negative symbol -:\nb = -7.987 Finally, it is possible to store a whole number in a floating-point value by simply adding a decimal point and a 0 at the end of the value, as in this example:\nc = 42.0 Later in this lab, we’ll see a couple of situations where that may be useful.\nFor now, we’re just going to assume that Python can easily handle any reasonable number we want it to store in a float variable, but there are some limits to the size and accuracy of those numbers. To reach these limits, we usually have to be dealing with numbers that have $ 100 $ or more digits, either before or after the decimal place. So, for the purposes of this class, those limits really won’t apply to what we’re doing. You’ll learn about these limits in detail in later programming classes.\n",
    "description": "",
    "tags": null,
    "title": "Floats",
    "uri": "/02-numbers/02-floats/"
  },
  {
    "content": "YouTube Video\nResources Slides Of course, we can also read numerical input in Python using the input() function. To do this, we must simply use either the int() or float() function to convert the input received as a string to the correct data type.\nHere’s a quick example program that requires two inputs for the price and quantity of an item being purchased:\ntext_one = input(\"Enter the price of one item: \") price = float(text_one) text_two = input(\"Enter the quantity of items: \") quantity = int(text_two) cost = price * quantity print(\"The total cost is $\", end=\"\") print(cost) If the user wishes to purchase $ 3 $ items at the price of $ 2.75 $ per item, then the program’s output would look like this:\nEnter the price of one item: 2.75 Enter the quantity of items: 3 The total cost is $8.25 In the program, we simply read each input from the user as a string value, then use the appropriate conversion function to convert it to the correct data type. For numbers including a decimal point, we use float(), but for whole numbers we use the int() function.\nThis works well if the user enters values that make sense. But, what if the user wishes to purchase a fraction of an item? Will this program work? Unfortunately, if the user enters a value with a decimal point for the second input, it can no longer be converted to an integer and we’ll get an error:\nEnter the price of one item: 2.75 Enter the quantity of items: 3.5 Traceback (most recent call last): File \"tutor.py\", line 4, in \u003cmodule\u003e quantity = int(text_two) ValueError: invalid literal for int() with base 10: '3.5' For right now, there’s not much we can do about that error other than write programs that clearly tell the user what type of data is expected, but later we’ll learn how to handle errors like this and prompt the user for input again.\n",
    "description": "",
    "tags": null,
    "title": "Numerical Input",
    "uri": "/03-strings-input/02-number-input/"
  },
  {
    "content": "YouTube Video\nResources Slides First, let’s start with the basics of writing Python code in a file and running those files. This is the first major step toward actually writing a real program, but it can definitely be difficult the first time without prior experience to rely on. So, let’s go through it step by step and make sure we know how to run our programs in Python.\nAt this point, we should already have Python installed on our system. For students using Codio, this is taken care of already. For students using their own computers, refer to an earlier lab to find instructions for installing Python on your system, or contact the instructors for assistance.\nTo make sure that Python is installed and working, we’ll need to open a terminal in our operating system. In Codio, this can be found by clicking the Tools menu at the top, and then choosing Terminal. More information can be found in the Codio Documentation. There may also already be one open for you if you are reading this content from within Codio.\nIf you are working on your own computer, you’ll need to open a terminal on your operating system. This should have been covered in the previous lab when you installed Python. On Windows, look for Windows Terminal or Windows PowerShell (not the old Command Prompt, which requires different commands). On Mac or Linux, look for an application called Terminal. Throughout this course, we’ll call these windows the terminal, even though they may have slightly different names in each operating system.\nOnce we have the terminal open, we should see something like one of these examples:\nAt this point, we should see a place with a blinking cursor, where we can type our commands. This is called the command prompt in the terminal. The first thing we can do is check to make sure Python is properly installed, and we can also confirm that it is the correct version. To do this, we’ll enter the following command and press enter to execute it:\npython3 --version Hopefully, that command should produce some output that looks like this:\nHere, we see that the currently installed Python version is 3.10.6. As long as your Python version number begins with a 3, you have correctly installed Python and are able to run it from the terminal. So, we can continue to the next part of this lab.\nIf you aren’t able to run Python or aren’t sure that you have the correct version, contact the instructor for assistance!\nPython 2 vs. Python 3 Notice that we have to use the command python3, including the version number, instead of the simpler python command here. This is because some systems may also have Python version 2, an outdated version of Python, installed alongside version 3. In that case, the simple python command will be Python version 2, while python3 will be Python version 3. Unfortunately, most programs written in Python 3 will not run properly in Python 2, so it is important for us to make sure we are using the correct Python version when running our programs.\nThankfully, the command python3 should always work, and using that command is a good habit to learn. So, throughout this course, we will use the command python3 to run Python programs.\nNavigating in the Terminal When we open a terminal, it will usually start in our user’s home folder. This may mean different locations for different operating systems. For example, if our current user’s name is \u003cusername\u003e, the terminal will usually start in this location for each operating system:\nWindows: C:\\Users\\\u003cusername\u003e Linux: /home/\u003cusername\u003e Mac: /Users/\u003cusername\u003e Codio: /home/codio/workspace The directory that is open in the terminal is known as the working directory. We can use the pwd command to determine what our current directory is:\nIn this example, we are looking at the Codio terminal, so our working directory is /home/codio/workspace.\nNext, we can see the files and directories contained in that directory using the ls command. Here’s the output of running this command in Codio:\nIn the output, we can see that there is a file named README.txt and a directory named python. In Codio, we’ll place all of our files in the python directory, so we can open that using the cd python command:\nNotice how the python directory is now included in the command prompt in the terminal. Most terminals will show the working directory in the command prompt in some way.\nThat’s the basics of navigating in the terminal, but there is much more to learn. If you’d like to know more, consider checking out some of the resources linked below!\nResources Basic Linux Navigation \u0026 File Management from DigitalOcean Beginner’s Guide to the Bash Terminal by Joe Collins on YouTube Windows \u0026 Mac Terminal Most of the content in this course will focus on using the commands that are present in the Linux terminal, since they are the most widely-used commands across all platforms. In general, these commands should work well on both Windows and Mac, with a few caveats:\nOn Windows, there is an older Command Prompt tool that does not support the newer Linux commands. Therefore, we won’t be using it. Instead, we only want to use Windows PowerShell, which supports most of the basic Linux commands via aliases to similar PowerShell commands. We can also install the Windows Terminal application for a more modern interface. Windows users may also choose to install the Windows Subsystem for Linux (WSL) to run Linux (such as Ubuntu) directly within Windows. Many developers choose to pursue this option, as it provides a clean and easy to use development environment that is compatible with the Linux operating system. The Mac operating system includes a terminal that uses either ZSH (since OS X 10.15) or Bash (OS X 10.14 and below). This terminal is very similar to the Linux terminal when it comes to navigating the file system and executing programs, which is sufficient for this course. Fully learning how to use these tools is outside of the scope of this class, but we need to know enough to navigate the filesystem and execute the python3 command. If you need assistance getting started with this step, your best bet is to contact the instructors. Each student’s computer is a bit different, so it is difficult to cover all possible cases here.\n",
    "description": "",
    "tags": null,
    "title": "Working in the Terminal",
    "uri": "/01-basic-python/02-working-in-terminal/"
  },
  {
    "content": "YouTube Video\nResources Slides Before we learn to write our first program, let’s start by introducing some important vocabulary terms:\nstring: A string in programming is any text that is stored as a value. We typically represent strings by placing them inside double quotes \"\" in our code and elsewhere. value: A value is a piece of data that our program is storing and manipulating. In our pseudocode, values consist of either numbers or strings. keyword: A keyword is a reserved word in a programming language that defines a particular statement, expression, structure, or other use. As we’ll learn later, we cannot use these keywords as variable or procedure names. statement: A statement refers to a piece of code that performs an action, but doesn’t result in any value. Most complete lines of code are considered statements. expression: An expression, on the other hand, is a piece of code that, when evaluated, will result in a value that can be used or stored. An expression can even contain multiple expressions inside of it! We’ll use these terms to help us understand different parts of the code in our programs. Now that we’ve covered them them, we can start to discuss the various statements in Python.\nThe first statement that we’ll cover in the Python programming language is the print(expression) statement. This statement is used to display output to the user via the terminal. So, when Python runs this statement, it will evaluate the expression to a single value, and then print that value to the terminal.\nFor example, the simplest Python code would be a simple Hello World program, where we use the print(expression) statement to display the text \"Hello World\" to the user:\nprint(\"Hello World\") Notice that the expression part of the statement contains \"Hello World\" in quotation marks? That is because \"Hello World\" is text, so we should put it in quotes and make it into a string in our code. Also, since the string \"Hello World\" can be treated like a value, we can also say it is an expression, and therefore we can use it in the expression part of the statement. This may seem pretty straightforward now, but as our programs become more complex it is important to think about what pieces of code can be treated as values, expressions, and statements.\nWhen we run that program in Python, we’ll see the following output:\nHello World If you look at the output, you might notice something strange - the text on our user interface doesn’t include the quotation marks \"\" that the expression \"Hello World\" contained. When we display text to the user, Python will remove the quotation marks from the beginning and the end of the string, and just display the text inside. Pretty handy!\nLet’s go through the full process of writing and running that program in Python!\nWriting a Python Program The first step to create a program in Python is to create a text file to store the code. This file should have the file extension .py to indicate that it is a Python program. So, we’ll need to create that file either on our computers or in Codio or another tool if we are using one. For example, in Codio we can create the file in the python folder by right-clicking on it and selecting the New File option. We’ll name the file hello.py:\nOnce we’ve created that file, we can then open it by clicking on it. In Codio and in other online tools, it will open in the built-in editor. On a computer, we’ll need to open it in a text editor specifically designed for programming. We recommend Visual Studio Code, which is available on all platforms. Tools like the built-in Notepad tool on Windows, or a word processor like Word or Pages do not work for this task.\nIn that file, we’ll simply place the code shown above, like this:\nThat’s all there is to it!\nRunning a Python Program Once we’ve written the code, we can open the Terminal and navigate to where the code is stored in order to run the program. On Codio, we’ll just use the cd python command to enter the python directory. On a computer, we’ll need to navigate the file system to find the location where we placed our code. We highly recommend creating a folder directly within the home directory and placing all of our code there - that will make it easy to find!\nOnce we are in the correct directory, we can use the ls command to see the contents of that directory. If we see our hello.py file, we are in the correct location:\nIf we don’t see our file, we should make sure we’ve saved it and that our current working directory is the same location as where the file is stored.\nFinally, we can execute the file in Python using the python3 command, followed by the name of the file:\npython3 hello.py If everything works correctly, we should see output similar to this:\nThere we go! We’ve just run our first program in Python! That’s a great first step to take.\nOf course, there are lots of ways that this could go wrong. So, if you run into any issues getting this to work, please take the time to contact an instructor and ask for assistance. This process can be daunting the first time, since there are so many things to learn and so many intricacies we simply don’t have time to cover up front. Don’t be afraid to ask for help!\n",
    "description": "",
    "tags": null,
    "title": "Print Statement",
    "uri": "/01-basic-python/03-print-statement/"
  },
  {
    "content": "YouTube Video\nResources Slides Concatenate Python includes an operator that can be used to concatenate two strings together. We can use the plus symbol + between two strings to concatenate them together into a single string, making it much simpler to build more complex strings and outputs.\nA simple example is shown below:\nfirst = \"Hello\" second = \"World\" print(first + second) When executed, this code will display this output:\nHello World As we can see, using the + operator in Python to concatenate two strings together is a quick and easy way to simplify our print statements.\nConcatenating Numbers Python also requires both sides of the + operator to be strings in order for concatenation to work. So, if we want to concatenate a string with a numeric value, we’ll have to convert it to a string using the special str() function. Here’s an example:\ntext = \"Your total is $\" value = 2.75 print(text + str(value)) When we run this program, we’ll receive the following output:\nYour total is $2.75 However, if we forget to convert the value variable to a string, as in this example:\ntext = \"Your total is $\" value = 2.75 print(text + value) we’ll receive an error instead:\nTraceback (most recent call last): File \"tutor.py\", line 3, in \u003cmodule\u003e print(text + value) TypeError: must be str, not float So, we’ll have to be careful and make sure that we convert all of our numbers to strings before trying to concatenate them together. Of course, if both sides of the + operator are numbers, then it will perform addition instead of concatenation!\nRepeat Python also includes an operator that allows us to quickly repeat strings. We can use the asterisk * operator to effectively “multiply” a string. Consider this example:\nword = \"repeat\" print(word * 2) print(word * 4) When we run this program, we’ll see the following output:\nrepeatrepeat repeatrepeatrepeatrepeat This allows us to build outputs that consist of repeated strings. We can also use this to quickly format our output into various shapes and structures!\nEscape Finally, we can also use the escape operator \\ to handle some certain special characters in Python strings. We’ve already seen this used in the newline character, which is simply the escape operator \\ followed by the letter n, as in \\n.\nHowever, we can also use it to include quotation marks in our string itself. Consider the following example:\nsentence = \"Hello from \"the little apple!\"\" print(sentence) When we try to run this code, we’ll get the following error:\nFile test.py, line 1 sentence = \"Hello from \"the little apple!\"\" ^ SyntaxError: invalid syntax This is because the double quotation mark \" is used to show which part of the code is a string value, but the Python interpreter gets confused when we try to include quotation marks inside of our strings. So, we can use the escape operator \\ to tell it to treat those quotation marks as part of the string value itself, and not part of the Python code:\nsentence = \"Hello from \\\"the little apple!\\\"\" print(sentence) This program will execute properly and produce the following output:\nHello from \"the little apple!\" Notice that the quotation marks now appear correctly in the output, but the escape operators are not shown. There are many other special ways to use the escape operator in Python, all of which can be found in the Python Documentation.\nSingle and Double Quotes Python also allows us to mix single and double quotes in a string, as long as we use them consistently, So, we can change the previous example to use single quotes around the string itself, and remove the escape operator from the double quotes, which will result in this code:\nsentence = 'Hello from \"the little apple!\"' print(sentence) This code will also produce the desired output. However, in this class we won’t use single quotes around strings, just for consistency. Many other programming languages don’t allow this, so we encourage you to learn how to use the escape operator to handle these situations.\n",
    "description": "",
    "tags": null,
    "title": "String Operators",
    "uri": "/03-strings-input/03-string-operators/"
  },
  {
    "content": "YouTube Video\nResources Slides Determining Variable Type One thing that is very useful to know how to do in Python is determining the type of data stored in a variable. Python is very flexible, and we can store any type of data in any variable. In fact, a variable’s data type can even change in Python, which is something that many other programming languages won’t allow. Technically speaking, we would say that Python uses strong typing, which means that each variable has a known data type that we can find, and dynamic typing, meaning that the type of the variable can change while the program is running.\nTo determine the type of a variable, we can use the type(expression) function in Python. We can simply place any variable or expression in the expression argument, and then it will tell us the type of the value that results from evaluating that expression. Then, we can simply use the print() function to print it to the screen. We won’t use this in our programs themselves, but it can be helpful for debugging purposes or to just better understand what is going on with data types.\nHere’s a quick example program showing the type() function in Python:\nx = \"Hello\" y = 5 z = 6.7 print(type(x)) print(type(y)) print(type(z)) When we execute this code in Python, we should see the following output:\n\u003cclass 'str'\u003e \u003cclass 'int'\u003e \u003cclass 'float'\u003e Based on that output, we can assume that the variable x is the str data type for strings, y is the int data type for whole numbers, and z is the float data type for decimal numbers. The type() function is pretty handy!\nConverting Between Data Types We can also convert values between the various data types in Python. To do this, there are special functions that match the name of the data types themselves, just like we saw in pseudocode. So, to convert any value to a string, we can use the str() function. Likewise, to convert anything to an integer, we can use the int() function. And finally, to convert anything to a floating-point value, we can use the float() function.\nSo, we can extend the previous example a bit by showing how we can convert values between different data types:\nx = \"5.7\" print(x) print(type(x)) print() y = float(x) print(y) print(type(y)) print() z = int(y) print(z) print(type(z)) When we run this program, we’ll get this output:\n5.7 \u003cclass 'str'\u003e 5.7 \u003cclass 'float'\u003e 5 \u003cclass 'int'\u003e In this program, we’re starting with the string value \"5.7\" stored in variable x. So, the first two print() statements will print that string value, and show that x is indeed storing a str data type. Then, we’ll use the float() function to convert the string value \"5.7\" stored in x to the floating-point value $ 5.7 $ and store that in y. The next two print statements will print that value, and show that y is storing a float data type. Notice that the value printed for both variables x and y looks identical, but the data type of each variable is different!\nFinally, we can use the int() function to convert the floating-point value $ 5.7 $ to an integer. In math, when we are asked to convert the number $ 5.7 $ to a whole number, our first instinct is probably to just round up to $ 6 $, since that is the closest value. However, in Python, as in most other programming languages, this function will simply truncate the value instead. Truncating a value simply means we take off the end of the value, so to convert $ 5.7 $ to an integer we just remove the decimal portion, and we’re left with the value $ 5 $. So, in the output above, we see that z stores the integer value $ 5 $, and it is the int data type.\nNotice that we are careful to say that the int() function will truncate the value, and not that it will round down. This is due to how Python handles negative numbers like $ -5.7 $. When converting that to an integer, it will also truncate it to $ -5 $ instead of rounding down to $ -6 $. So, we use the word truncate as the best way to describe the int() function.\nExceptions Since we are running our Python programs on a real computer, we have to be a bit careful about how we use these functions. Specifically, if we try to convert a value to a different data type and Python can’t figure out how to do that, we’ll cause an exception to occur. An exception in programming is any error that happens when the computer tries to run our code.\nFor example, what if we try to convert the string value \"5.7\" directly to an int data type, as in this example:\na = \"5.7\" print(a) print(type(a)) print() b = int(a) print(b) print(type(b)) When we try to run this code in a file, such as the tutor.py file shown here, we’ll see this output printed on the terminal:\n5.7 \u003cclass 'str'\u003e Traceback (most recent call last): File \"tutor.py\", line 5, in \u003cmodule\u003e b = int(a) ValueError: invalid literal for int() with base 10: '5.7' Uh oh! That’s not good. In the output, we can see that we’ve caused a ValueError, which is an exception that happens when we try to use a value in an incorrect way. So, we’ll need to carefully look at our code to see if we can find and fix the error.\nThankfully, in the output, it will tell us that the error occurred on line 5 of the file tutor.py, so we can open that file and scroll to that line of code:\nb = int(a) This is where the error occurred. There are several ways we can fix it. The easiest would be to simply convert a to a floating-point value using the float() function instead.\nLearning how to find and fix these exceptions is a key part of learning how to program. We’ll inevitably run into a few exceptions as we start to build larger and more complex programs. In this course, most exceptions can be easily handled simply by working carefully through the code, but every once in a while we may run into an exception that is truly difficult to solve. That’s one of the important things to remember when learning how to program - it is sometimes much easier to cause an exception than it is to figure out how to fix it, and sometimes you may need to reach out for help to get past a particularly tricky exception. So, don’t be afraid to ask the instructors or TAs for help if you get stuck on an exception. Many times, it’s a great chance for you to learn some new programming skills.\n",
    "description": "",
    "tags": null,
    "title": "Types",
    "uri": "/02-numbers/03-types/"
  },
  {
    "content": "YouTube Video\nResources Slides Now that we have the ability to store numerical data in variables in Python, we should also learn how to manipulate that data into something new. To do that, let’s learn about operators. An operator in programming is a special symbol that can be used in an expression to manipulate the data in some way.\nMost operators are binary operators, which means they perform an operation that uses two values as input and produces a single value as output. In fact, in some programming languages, the operators themselves are implemented as functions in the language! Finally, we have to be careful not to confuse these with bitwise operators, which are operators perform operations on the binary value stored in a variable. We won’t cover those operators in this class, but the terminology is a bit confusing.\nAn expression containing a binary operator typically follows this format:\n\u003cexpression\u003e \u003coperator\u003e \u003cexpression\u003e As before, the \u003cexpression\u003e parts can be any valid expression in the language that can be reduced to a single value, and the \u003coperator\u003e part is typically a single symbol, but it can also be a short keyword as well.\nThankfully, these operators should all be very familiar to us from mathematics already, so this is just a quick discussion of how they can be used in programming.\nAddition and Subtraction For starters, we can use the plus + and minus - symbols as operators to perform addition and subtraction in pseudocode, just like in math. For example, we can add two variables together to create a third variable as shown in this example:\na = 5 b = 7 c = a + b print(c) When we run this code in the Python interpreter, we should get this result:\n12 Likewise, we can subtract two variables using the minus symbol - as shown here:\nx = 24 y = 10 z = x - y print(z) This code should produce this output:\n14 Multiplication and Division In Python, we use the asterisk *, sometimes referred to as the star symbol, to multiply two values together. For example, we can find the product of two values as shown in this Python block:\na = 6 b = 7 c = a * b print(c) When we run this code, we should see the following result displayed to the user:\n42 Division is performed using the slash / symbol. A great way to think of division in programming is just like a fraction, since it uses the same symbol between the two numbers. For example, if we execute this code:\nx = 27 y = 3 z = x / y print(z) we would see this output:\n9.0 What if the division would result in a remainder? In that case, we’ll simply use decimal values in pseudocode so that the result is exactly correct. For example, if we try to divide $ 19 $ by $ 5 $, as in this example:\na = 19 b = 5 c = a / b print(c) When we run this code, the Python interpreter will produce the following output:\n3.8 So, as we can see, all of these operators in Python work exactly like their counterparts in math. So, we can easily use them in a way that should be very familiar to us.\n",
    "description": "",
    "tags": null,
    "title": "Basic Operators",
    "uri": "/02-numbers/04-basic-operators/"
  },
  {
    "content": "YouTube Video\nResources Slides Python also includes another method of building strings, which are known as “F-strings”. F-strings allow us to put placeholders in strings that are later replaced with values from variables, effectively creating a way to build “templates” that can be used throughout our program.\nThe easiest way to see how this works is looking at a few examples. Let’s start with a simple one:\nname = input(\"Enter your name: \") print(f\"Hello {name}\") If the user inputs \"Willie Wildcat\" when prompted, then this code will produce this output:\nEnter your name: Willie Wildcat Hello Willie Wildcat There are many important parts to this example, so let’s look at each one individually. First, in the print() statement, we see the string \"Hello {name}\". This is an example of a template string, which includes a set of curly braces {} as placeholders for data to be inserted. Each template string can have unlimited sets of curly braces. Inside of each set of curly braces, we can place the variable or expression that will be printed at that location.\nAlso, we notice that in front of the string, we see the character f. Preceding a string with f outside of the quotation marks will denote the string as an f-string (hence the name), which allows the values inside to be interpolated. Interpolation is the term used when formatting marks in a string, such as the curly braces in an f-string, are interpreted and replaced with the correct values they represent.\nAdvanced Formatting Python f-strings can do many powerful things, such as handle more complex formatting and multiple lines. For right now, we’ll just use simple variable placeholders in our f-strings, but over time we’ll introduce additional ways to use f-strings to achieve the desired output.\nThe most powerful use of f-strings is to insert numerical values directly into strings without having to convert each value directly to the str data type - the interpolation process handles this for us.\nFor example, we can update our previous program to use f-strings to display the output in a single print() statement, and we can also add additional information with ease:\ntext_one = input(\"Enter the price of one item: \") price = float(text_one) text_two = input(\"Enter the quantity of items: \") quantity = int(text_two) cost = price * quantity print(f\"{quantity} items at ${price} each is ${cost} total\") When we execute this program, we’ll see output that looks like this:\nEnter the price of one item: 2.75 Enter the quantity of items: 3 3 items at $2.75 each is $8.25 total This example shows how easy it is to build complex output strings using f-strings.\nFormat Method Prior to the introduction of f-strings, it was common to use the format() method to place values inside of a template string. The last line of the previous example would look like this using the format method:\nprint(\"{} items at ${} each is ${} total\".format(quantity, price, cost)) As we can see, the format() method receives each value as an argument, and it will replace the curly brace placeholders {} in the template string with each value, working from left to right. The output produced will be identical to the f-string in the example above.\nWe won’t use the format() method in this class, but you may see it in many online tutorials and documentation since f-strings were introduced relatively recently.\n",
    "description": "",
    "tags": null,
    "title": "F-Strings",
    "uri": "/03-strings-input/04-f-strings/"
  },
  {
    "content": "YouTube Video\nResources Slides One important key to remember: by default, the print(expression) statement in Python will add a newline to the end of the output by default. This means that multiple print(expression) statements will print on multiple lines. Let’s look at some examples!\nThroughout this course, we’ll show many different code examples and their output here in the lab. To test them out, feel free to copy the code examples to a Python file and run it yourself. You can even tweak them to do something new and see how Python interprets different pieces of code. In the end, the best way to learn programming is to explore, and running these examples on your own is a great way to get started!\nExample 1 - Multiple Statements First, let’s write a simple program that prints 4 letters separated by spaces:\nprint(\"a b c d\") Just like our “Hello World” program, when we run this program, we’ll see that string printed in the user interface:\na b c d Ok, that makes sense based on what we’ve previously seen. The p[rint(expression) statement will simply display any string expression in our user interface.\nOf course, programs can consist of multiple statements or lines of code. So, what if we write a program that contains multiple print(expression) statements, like this one:\nprint(\"one\") print(\"two\") print(\"three\") print(\"four\") What do you think will happen when we try to execute this program on our “mental model?” Have we learned a rule that tells us what should happen yet? Recall on the previous page we learned that it will print the value on the user interface, but that’s it. So, when we execute this program, we’ll see the following output:\none two three four That’s a very interesting result! We can see that four separate print(expression) statements will generate four lines of output by default. Each statement is printed on its own line. So, in Python we can print multiple lines of output simply by using multiple print(expression) statements!\nExample 2 - Multiple Lines from Single Statement What if we want to print output on multiple lines using a single print(expression) statement? How can we do that? In this case, we need to introduce a special symbol, the newline symbol. In most programming languages, the newline symbol is represented by a backslash followed by the letter “n”, like \\n, in a string. When our user interface sees a newline symbol, it will move to the next line before printing the rest of the string. The newline symbol itself won’t appear in our output.\nFor example, we can update our previous program to contain newline symbols between each letter:\nprint(\"a\\nb\\nc\\nd\") This might be a bit difficult to read at first, but as we become more and more familiar with reading code, we’ll start to see special symbols like the newline symbol just like any other letter. For now, we’ll just have to read closely and make sure we are on the lookout for special symbols in our text.\nWhen we run this program, we should see the following output on our user interface:\na b c d There we go! We’ve now figured out how to print text on multiple lines using a single print(expression) statement.\nExample 3 - Multiple Statements on Same Line What if we want to display multiple print(expression) statements on the same line? To do that, we must add an additional option to the print(expression) statement - the end option.\nFor example, the following code will produce output all on the same line:\nprint(\"Hello \", end=\"\") print(\"World!\") In this example, we set end to be an empty string \"\". When we run this program, we’ll get the following output:\nHello World! In fact, in Python, the print(expression) statement is an example of a function in Python. Functions are just repeatable procedures in our code - when we use them, we write the name of the function, followed by a set of parentheses and then inputs, or “arguments,” separated by commas within the parentheses. This is known as “calling” a function. So, in actuality, the expression in the print(expression) statement is just the first argument when we call the print function.\nTherefore, the end option that we showed above is just a second argument that is optional - it simply lets us choose what to put at the end of the output. By default, the end parameter is set to the newline symbol \\n, so if we don’t provide an argument for end it will just add a newline at the end of the value.\nWe can set the value of end to be any string. If we want to include a space at the end of the output, we can add end=\" \" to the print function call.\nIn this course, we won’t spend much time talking about optional parameters and default values in Python functions, but it is important to understand that statements like print are actually just Python functions behind the scenes!\n",
    "description": "",
    "tags": null,
    "title": "Using Print",
    "uri": "/01-basic-python/04-using-print/"
  },
  {
    "content": "YouTube Video\nResources Slides Finally, let’s look at how we can rewrite some of our previous Python programs by combining expressions into more complex statements. Just like we saw in pseudocode, Python also allows us to perform multiple actions on a single line of code, provided they can all be combined in some way to create a single statement.\nLet’s consider the example on the previous page, shown here:\ntext_one = input(\"Enter the first number: \") one = int(text_one) text_two = input(\"Enter the second number: \") two = int(text_two) one = one * one two = two * two total = one + two print(f\"The sum of squares of {one} and {two} is {total}\") There are many ways we can write this program to perform the same work. For example, the process of computing the sum of squares itself can actually be reduced to a single line of code as seen below:\ntotal = (one * one) + (two * two) We can perform multiple mathematical operations in a single expression, and as long as we either use parentheses or pay attention to the order of operations, we’ll get the expected answer. We don’t have to store the intermediate values in variables, since Python will do that for us when it evaluates the expression.\nLikewise, we can put the input() function inside of the int() function, allowing us to read input as a string and convert it to an integer in a single line:\none = int(input(\"Enter the first number: \")) two = int(input(\"Enter the second number: \")) total = (one * one) + (two * two) print(f\"The sum of squares of {one} and {two} is {total}\") Finally, we can also move the computation of the sum of squares directly into the f-string. When Python tries to print the f-string, the interpolation process must compute that value before it can print the output.\none = int(input(\"Enter the first number: \")) two = int(input(\"Enter the second number: \")) print(f\"The sum of squares of {one} and {two} is {(one * one) + (two * two)}\") Functionally, this code will create the exact same output as the previous code, but it will do so using fewer variables and statements. Each statement is simply more complex, consisting of multiple expressions.\nConcise and Readable The real question is: which of these two examples is best? That is, which one is the preferred coding style to learn? The answer is that it really depends - both have their merits, and functionally they will work nearly identically on most modern computers and programming languages.\nIt really is a question of style - is it better to have more lines of code and variables, clearly spelling out what each step of the process is, or is it better to have shorter programs with more complex lines of code but maybe fewer variables? For beginning programmers, it is usually recommended to follow the first style, using as many variables as needed and focusing on short, concise lines of code over large, complex statements.\nHowever, as we become more accustomed to programming, we’ll find that many times it is easier to read and understand complex statements, and our code can be written in a way that better reflects what it is actually doing.\nThis is very similar to learning how to read, write, and speak in a new language. We must start with short, concise sentences, and slowly build up our knowledge of more complex statements and grammar rules until we become a fluent speaker.\nOverall, the best advice to follow is to make your code readable to both yourself and anyone else who may have to read and maintain the code. As long as it is clear what the code is doing based on what it says, it is probably a good style to follow. As we continue to learn more, we’ll slowly refine our coding style to be one that is easy to follow and understand for everyone.\n",
    "description": "",
    "tags": null,
    "title": "Complex Statements",
    "uri": "/03-strings-input/05-complex-statements/"
  },
  {
    "content": "YouTube Video\nResources Slides Modulo Operator The Python programming language also includes a few math operators that are not commonly used outside of programming.\nThe first one is the modulo operator. The modulo operator is used to find the remainder of a division operation. If we think back to math again, we’ve probably learned how to perform long division when dividing two values. At the end, we might be left with a remainder, or a portion of the first number that is left over after the operation is complete. In many computer programs, that value is very useful, so we have a special operator we can use to find that value. In Python, we use the percent symbol % as the modulo operator.\nFor example, if we want to find the remainder after dividing $ 19 $ by $ 5 $, we would use the following code:\nx = 19 y = 5 z = x % y print(z) When we run this code, we would get the following output:\n4 This is because the value $ 5 $ will fit into the value $ 19 $ only $ 3 $ times, and then we’ll have the value $ 4 $ left over. Mathematically, we are saying that $ 19 / 5 = (3 * 5) + 4 $. Since $ 4 $ is the leftover portion, it is the resulting value when we use the modulo operator.\nIn this course, we’ll only worry about how the modulo operator works when applied to positive whole numbers. In practice, it can be applied to any numerical value, including decimal values and negative numbers, but those values are not really useful in most cases. So, to keep things simple, we’ll only use positive whole numbers with this operator.\nExponentiation Operator The next operator introduced by Python is the exponentiation operator. The double star ** operator is used to represent exponentiation, sometimes referred to the power operator. In Python, the expression 2 ** 3 would be written mathematically as $ 2^3 $, which is the operation of taking $ 2 $ to the power of $ 3 $, or multiplying $ 2 $ by itself $ 3 $ times.\nHere’s a quick example of using the ** operator in code:\nx = 5 ** 3 print(x) print(type(x)) When this code is run, we see the following output:\n125 \u003cclass 'int'\u003e ||| growthhack\nDon’t Use the Carat ^! Many other programming languages and tools use the carat ^ character to represent the exponentiation operation. However, in Python, the carat ^ character is used to represent the bitwise XOR operation. So, we must be careful not to accidentally use the ^ operator when we actually mean to use the ** operator for exponentiation.\n|||\nInteger Division Operator Finally, Python also includes the integer division operator, represented by two forward slashes //, which is used to perform division that truncates the result to an integer. However, as we’ll see on the next page, if either of the values in the operation is a float value, it will return a value that is a float data type, even though the result is an integer value.\nLet’s look at an example with that operator in code:\na = 17.5 // 4.5 print(a) print(type(a)) As we expect, when we run this program, we’ll get the following output:\n3.0 \u003cclass 'float'\u003e So, we see that this operator will return a float value, even though it is truncating the result to an integer, simply because the input values contained a float.\n",
    "description": "",
    "tags": null,
    "title": "New Operators",
    "uri": "/02-numbers/05-new-operators/"
  },
  {
    "content": "Let’s try some simple practice problems. These problems are not graded - they are just for you to practice before doing the real exercises in the lab itself. You can find the answers below each question by clicking the button below each question.\n1.1 Reading Code What is the output that is displayed to the user after running the following Python code:\nprint(\"Kansas State University\") print(\"Manhattan \", end=\"\") print(\"KS\", end=\" \") print(\"66506\") print(\"KSU!\\nGo Cats!\") Answer 1.1 Answer The correct output:\nKansas State University Manhattan KS 66506 KSU! Go Cats! 1.2 Constructing Code We want to write a program that produces the following output:\n* * * * * * Rearrange the following Python statements to create a program that produces that output. You may not use all of these statements in your answer.\nprint(\"*\") print(\"*\") print(\"*\") print(\"*\", end=\" \") print(\"*\", end=\" \") print(\"*\", end=\" \") Answer 1.2 Answer One solution:\nprint(\"*\") print(\"*\", end=\" \") print(\"*\") print(\"*\", end=\" \") print(\"*\", end=\" \") print(\"*\") 1.3 Writing Code Write a Python program that will display the last five letters of the alphabet, one per line.\nAnswer 1.3 Answer One possible answer is shown below:\nprint(\"v\") print(\"w\") print(\"x\") print(\"y\") print(\"z\") Many others are possible!\n",
    "description": "",
    "tags": null,
    "title": "Print Practice",
    "uri": "/01-basic-python/05-print-practice/"
  },
  {
    "content": "Let’s try some simple practice problems. These problems are not graded - they are just for you to practice before doing the real exercises in the lab itself. You can find the answers below each question by clicking the button below each question.\n3.1 Reading Code Write the output that is displayed to the user after running the following Python code:\nx = input(\"Enter a number: \") y = x + \"00\" z = int(y) a = int(z + (z / 100)) print(f\"The result is {a}\") Assume the user inputs the string \"4\" when prompted.\nAnswer 3.1 Answer The correct answer is:\nThe result is 404 3.2 Reading Code Write the output that is displayed to the user after running the following Python code:\nx = int(input(\"Enter a number: \")) x = x // 100 * 100 + x % 10 print(f\"The answer twice is {x * 2}\") Assume the user inputs the string \"121\" when prompted.\nAnswer 3.2 Answer The correct answer is:\nThe answer twice is 202 Notice that the x * 2 expression results in the value 202 instead of the string \"101101\". This is because x is an integer value, not a string. So, the * operator is interpreted as multiplication, not string repetition. We have to carefully keep track of what data type each variable is storing in order to truly understand what the code will do.\n3.3 Writing Code Write a Python program that prompts the user to input a verb and a noun that will be stored in separate variables. Then, use those two words to create a simple compliment for the user and print it to the terminal. The compliment should be in the form of:\nYou \"\u003cverb\u003e\" my \"\u003cnoun\u003e\"? That's awesome! For example, if the user inputs \"love\" and \"food\", then the string printed by the program should be:\nYou \"love\" my \"food\"? That's awesome! Hint: Notice that the output includes quotation marks around the two words provided by the user, and an apostrophe (single quote) as well. You’ll need to account for this in your code!\nYou can expand on this program to prompt the user for additional inputs, and use f-strings to create a Mad Libs style game!\nAnswer 3.3 Answer One possible answer is:\nverb = input(\"Enter a verb: \") noun = input(\"Enter a noun: \") print(f\"You \\\"{verb}\\\" my \\\"{noun}\\\"? That's awesome!\") The biggest point to remember is that quotation marks need to be escaped. If you try to use single quotes instead of double quotes around the f-string, you’ll need to escape the apostrophe (single quote) instead.\n",
    "description": "",
    "tags": null,
    "title": "Input Practice",
    "uri": "/03-strings-input/06-input-practice/"
  },
  {
    "content": "YouTube Video\nResources Slides Since Python has multiple numeric data types, there are some rules that govern which data type is produced as a result of various math operations. Thankfully, the rules themselves are pretty straightforward once they are explained.\nResulting Data Types - Same Type The basic rule to remember, if a mathematical operator is applied to two variables of the same data type, the result will also be that data type.\nLet’s see what that means in practice. Here’s a quick example in Python using the multiplication operator on two integer values:\nx = 5 y = 10 z = x * y print(z) print(type(z)) When we run this code, we should see the following output:\n50 \u003cclass 'int'\u003e Since both x and y are the int data type, the result of x * y will also be an int value, so the variable z will have that data type, as shown in this example.\nHowever, there is one exception to this rule, which is the division operator /. In Python, the division operator will always return a float value, even if it is a whole number. Here’s an example that demonstrates that:\na = 9 b = 3 c = 4 x = a / b print(x) print(type(x)) print() y = a / c print(y) print(type(y)) When we run this program, we’ll see the following output:\n3.0 \u003cclass 'float'\u003e 2.25 \u003cclass 'float'\u003e So, as we can see, even though we are dividing two int values, we’ll get a float value as a result each time we use the division operator.\nFollowing the rule above, if we perform a mathematical operation between two float values, the resulting value will always be a float as well:\na = 2.5 b = 4.5 c = a + b print(c) print(type(c)) Running this code will produce this output:\n7.0 \u003cclass 'float'\u003e So, even though the result is a whole number, the value that is stored is the float data type.\nResulting Data Types - Different Type The other rule to remember is anytime an operation involves a float value and an int value, the result will be a float. So, if there are mixed types, Python will default to the float data type.\nThis can be seen in the following example:\na = 5 b = 2.0 c = a - b print(c) print(type(c)) When this code is executed, the output should look like this:\n3.0 \u003cclass 'float'\u003e Once again, even though the result is a whole number, because the variable b is a float value, the entire result will also be a float value.\nLearning the data types that are returned by a mathematical operator can be tricky, but most programmers slowly develop an intuition of how each operator works and what to expect. So, don’t worry too much if this is confusing right now, since it will become much clearer with practice! Also, don’t forget that we can always create a simple test program like the examples shown above to confirm the result for any operation.\n",
    "description": "",
    "tags": null,
    "title": "Resulting Types",
    "uri": "/02-numbers/06-resulting-types/"
  },
  {
    "content": "YouTube Video\nResources Slides Now that we’ve learned how to use the print(expression) statement, let’s focus on the next major concept in Python, as well as any other programming language: variables.\nThe word variable is traditionally defined as a value that can change. We’ve seen variables like $x$ used in Algebraic equations like $x + 4 = 7$ to represent unknown values that we can try to work out. In programming a variable is defined as a way to store a value in a computer’s memory so we can retrieve it later. One common way to think of variables is like a box in the real world. We can put something in the box, representing our value. Likewise, we can write a name on the side of the box, corresponding to our variable’s name. When we want to use the variable, we can get the value that it currently stores, and even change it to a different value. It’s a pretty handy mental metaphor to keep in mind!\nIn a later lab, we’ll learn how to use operators to manipulate the values stored in variables, but for right now we’re just going to focus on storing and retrieving data using variables.\nCreating Variables To use a variable, we must first create one. In Python, we create a variable in a special type of statement called an assignment statement. The basic structure for an assignment statement is a = expression. When our Python interpreter runs this statement, it will first evaluate expression into a single value. Then, it will store that value in the variable named a.\nFor example, let’s consider the Python statement:\nx = \"Hello World\" In that statement, we are storing the string value \"Hello World\" in the variable named x. Pretty handy!\nNow, let’s cover some important rules related to assignment statements:\nAssignment statements are always written with the variable on the left, and an expression on the right. We cannot reverse the statement and say expression = x in programming like we can in math. In mathematical terms, this means an assignment statement is not commutative. The left side of an assignment statement must be a location where a value can be stored. For now, we’re just going to work with single variables, so we don’t have to worry about this yet. In a later lab, we’ll introduce lists as another way to store data, and we’ll revisit this rule. The right side of an assignment statement must be an expression that evaluates to a value that can be stored in the location given on the left side. Right now we’re only working with string values, so we don’t have to worry about this rule yet. We’ll come back to it in a future lab. Using Variables Once we’ve created a variable, we can use it in any expression to recall the current value stored in the variable. So, we can extend our previous example to store a value in a variable, and then use the print(expression) statement to display it’s value. Here’s what that would look like in Python:\nx = \"Hello World\" print(x) Notice that we don’t put quotation marks \" around the variable x in the print(expression) statement. This is because we want to display the value stored in the variable x, not the string value \"x\". So, when we run this code, we should get this output:\nHello World To confirm, feel free to try it yourself! Copy the code above into a Python file, then use the python3 command in the terminal to run the file and see what it does. Running these examples is a great way to learn how a computer actually executes code, and it helps to confirm that your “mental model” of a computer matches how a real computer operates.\nUpdating Variable Values Python also allows us to change the value stored in a variable using another assignment statement. For example, we can write some Python code that uses the same variable to print multiple outputs:\na = \"Output 1\" print(a) a = \"Output 2\" print(a) When we run this code, we’ll see the following output:\nOutput 1 Ouptut 2 So, just like we learned above, when we evaluate a variable in code, it will result in the value currently stored in that variable at the time it is evaluated. So, even though we are printing the same variable twice, each time it is storing a different value. Recall that this is why we call items like a a variable - their value can change!\nVariable Names Finally, Python has a few simple rules that determine what names can be used for variables in our code. Let’s quickly review those rules, as well as some conventions that most Python developers follow when naming variables.\nFirst, the rules that must be followed:\nVariable names must begin with either a letter or an underscore _. Variable names may only contain letters, numbers, and underscores _. Variable names are case sensitive. Next, here are the conventions that most Python developers follow for variable names, which we will also follow in this course:\nVariable names beginning with an underscore _ have a special meaning. So, we won’t create any variables beginning with an underscore right now, but later we’ll learn about what they mean and start using them. Variables should have a descriptive name, like total or average, that makes it clear what the variable is used for. Variables should be named using Snake Case. This means that spaces are represented by underscores _, as in number_of_inputs Try to use traditional variable names only for their specific uses. Some examples of traditional variable names: tmp or temp are temporary variables. i, j, and k are iterator variables (we’ll learn about those later). x, y, and z are coordinates in a coordinate plane. r, g, b, a are colors in an RGB color system. Variables should not have the same name as keywords or any built-in statements or expressions in the language. For example, Python has a print statement, so we should not name a variable print in our language. In general, longer variable names are more useful than short ones, even if they are more difficult to type. These conventions are not strict requirements enforced by the Python language itself, but they are general rules to help us write code that is meaningful and easy to read.\nFinally, don’t forget that some of the code examples in this course will NOT follow these conventions, mainly because long, descriptive variable names might give away the purpose of the code itself. We’ll still follow the rules that are required, but in many cases we’ll use simple variable names so that the focus is learning to read the structure of the code, not inferring what it does based solely on the names of the variables.\n",
    "description": "",
    "tags": null,
    "title": "Variables",
    "uri": "/01-basic-python/06-variables/"
  },
  {
    "content": "YouTube Video\nResources Slides As we learn to write more complex programs in Python, it is important to make sure we can still mentally execute the code we are writing in our “mental model” of a computer before we actually run it on a computer. After all, if we don’t have at least an idea of what the code actually does before we write it, we really haven’t learned much about programming!\nThankfully, when working in a real programming language such as Python, there are many tools to help us visualize how the code works when we run it. This helps us continue to develop our “mental model” of a computer by looking behind the scenes a bit to see what is happening when we run our code.\nOne such tool is Python Tutor, a website that can quickly run short pieces of Python code to help us visualize what each line does and how it works. This tool is also integrated directly into Codio!\nPython Tutor Example Let’s look at an example of how Python Tutor compares to the manual code traces we performed in a previous lab. For this example, we’re going to use the following code:\nx = \"Hello\" y = x print(y, end=\" \") x = \"World\" print(x, end=\", \") print(y) In Codio, we can see the visualization in a tab to the left. It will visualize the content in the tutor.py file in the python directory, so make sure that the contents of the tutor.py file match the example above before continuing.\nOutside of Codio, this visualization can be found by clicking this Python Tutor Link to open Python Tutor on the web.\nStepping Through Code The initial setup for Python Tutor is shown in the image below:\nThis looks similar to the setup we used when performing code tracing with pseudocode. We have an arrow next to our code that is keeping track of the next line to be executed, and we have areas to the side to record variables and outputs. In Python Tutor, the variables are stored in the Frames section. We’ll learn why that is important later in this lab when we start looking at Python functions.\nSo, let’s click the Next \u003e button once to execute the first line of code. After we do that, we should see the following setup in Python Tutor:\nThat line is an assignment statement, so Python Tutor added an entry in the Frames section for the variable x, showing that it now contains the string value \"Hello\". It placed that variable in a frame it is calling the “Global frame,” which simply contains variables that are created outside of a function in Python.\nWhen we click the Next \u003e button again, we should see this:\nOnce again, the line that was just executed is an assignment statement, so Python Tutor will add a new variable entry for y to the list of variables. It will also store the string value \"Hello\". Just like before, notice that the variable y is storing the same value as x, but it is a copy of that value. The variables are not connected in any other way.\nWe can click Next \u003e again to execute the next line of code:\nOnce this line is executed, we’ll see that it prints the value of the variable y to the output. Python Tutor will look up the value of y in the Frames section and print it in the output, but it won’t evaluate the expression in the code like we did when we performed code tracing in pseudocode. It’s a subtle difference, but it is worth noting.\nOnce again, we can click Next \u003e to execute the next assignment statement:\nThis statement will update the value stored in the variable x to be the string value \"World\". After that, we can run the next statement:\nThat statement prints the value of x to the output, followed by a comma , and a space as shown in the end argument provided to the print function. Finally, we can click Next \u003e one more time to execute the last line of code:\nThis will print the value of y to the output. Once the entire program has been executed, we should see the output Hello World, Hello printed to the screen.\nThe full process is shown in the animation below:\nUsing tools like Python Tutor to step through small pieces of code and understand how the computer interprets them is a very helpful way to make sure our “mental model” of a computer accurately reflects what is going on behind the scenes when we run a piece of Python code on a real computer. So, as we continue to show and discuss examples in this course, feel free to use tools such as Python Tutor, as well as just running the code yourself, as a great way to make sure you understand what the code is actually doing.\n",
    "description": "",
    "tags": null,
    "title": "Code Tracing",
    "uri": "/01-basic-python/07-code-tracing/"
  },
  {
    "content": "YouTube Video\nResources Slides Finally, just like in mathematics, we must also be aware of the order that these operators are applied, especially if they are combined into a single expression. Thankfully, the same rules we learned in mathematics apply in programming as well. Specifically, operators in Python are applied in this order:\nOperations in parentheses are resolved first, moving from left to right. ** is resolved second, moving from left to right *, /, // and % are resolved third, moving from left to right. + and - are resolved fourth, moving from left to right. You might recall the “PEMDAS” acronym for remembering the order of operations in math, and thankfully it still applies here. Of course, this means that there are now 4 operators that all fit in the “multiplication and division” portion, so we have to carefully make sure they are all taken care of in the correct way.\nAlso, as you’ve probably already learned in math, it is always best to add extra parentheses to any expression to make the intent very clear instead of relying on the order of operations. So, when in doubt, use extra parentheses wherever needed!\nLet’s work through a quick example just to see the order of operations in practice. Here’s a complex expression in Python that we can try to evaluate:\nx = 8 / 4 + 5 * (3 + 1) - 7 % 4 Looking at our order of operations, the first step is to handle any expressions inside of parentheses. So, we’ll first start with the expression (3 + 1) and evaluate it to 4.\nx = 8 / 4 + 5 * 4 - 7 % 4 Then, we’ll go right to left and perform any multiplication, division, and modulo operations. This means we’ll evaluate 8 / 4, 5 * 4 and 7 % 4 and replace them with the resulting values:\nx = 2.0 + 20 - 3 Notice that 8 / 4 was reduced to 2.0 instead of just 2. This is because the division operator is the one exception to the rule where an operator applied to two integers will result in an integer. The division operator always produces a floating-point value.\nFinally, we’ll perform addition and subtraction from left to right. So, we’ll evaluate 2.0 + 20 first, and then subtract 3 from the result of that operation. At the end, we’ll have this statement:\nx = 19.0 So, we were able to use our knowledge of the order of operations to evaluate that complex expression to a single value, $ 19.0 $, which will be stored in the variable x.\n",
    "description": "",
    "tags": null,
    "title": "Order of Operations",
    "uri": "/02-numbers/07-order-of-operations/"
  },
  {
    "content": "Python input input(expression) will display the expression to the user as a prompt, then return what was typed by the user as a string value. input(expression) is terminated by the user pressing ENTER, so next output starts on a new line. Python String Operators + Concatenation (join strings together). May only be applied to two strings. * Repeat (duplicate strings) \\ Escape Operator for special characters f-string are used to format output. Template strings include curly braces as placeholders {} and inside the placeholder is any variable or expression to be printed in that location in the template string. Complex Statements Expressions can be combined in many ways within a statement. Expressions can be used as arguments to functions, and more!\n",
    "description": "",
    "tags": null,
    "title": "Summary",
    "uri": "/03-strings-input/07-summary/"
  },
  {
    "content": "Let’s try some simple practice problems. These problems are not graded - they are just for you to practice before doing the real exercises in the lab itself. You can find the answers below each question by clicking the button below each question.\n2.1 Reading Code Write the output that is displayed to the user after running the following Python code:\nx = 13 z = \"5\" y = int(z) var = (x + y) % y * y - x var = var / 2 print(var) Pay special attention to data types! Make sure the answer is presented as the correct type.\nAnswer 2.1 Answer The correct answer is\n1.0 Following order of operations, we do parentheses first:\n(x + y) % y * y - x (13 + 5) % 5 * 5 - 13 18 % 5 * 5 - 13 Then we will do multiplication and modulo left to right. Recall that % is the modulo operation, so 18 % 5 is the remainder of 18 / 5, which is 3:\n18 % 5 * 5 - 13 3 * 5 - 13 15 - 13 Finally, we do subtraction:\n15 - 13 2 The last line will compute 2 / 2, which is just 1.0. Recall that the division operation always produces a float, not an integer.\n2.2 Reading Code Write the output that is displayed to the user after running the following Python code:\nx = 9 y = 3.0 z = 5 ans = (x - z) % 2 // y + z ** (y - 1) print(ans) Pay special attention to data types! Make sure the answer is presented as the correct type.\nAnswer 2.2 Answer The correct answer is:\n25.0 Following order of operations, we do parentheses first:\n(x - z) % 2 // y + z ** (y - 1) (9 - 5) % 2 // 3.0 + 5 ** (3.0 - 1) 4 % 2 // 3.0 + 5 ** 2.0 Then, we’ll perform all multiplication, division, modulo, and integer division from left to right:\n4 % 2 // 3.0 + 5 ** 2.0 0 // 3.0 + 5 ** 2.0 0.0 + 5 ** 2.0 0.0 + 25.0 Finally, we’ll perform addition to find the answer of 25.0.\n2.3 Writing Code You are teaching a class and would like to put your students into a number of groups. You know how many students are in the class and the number of groups to create, but you aren’t sure how many students should be in each group.\nWe’ll assume that these values are stored in the students and groups variables, respectively.\nWrite a Python program to compute the ideal group size for each group in the class. When divided, the groups in the class should have no fewer than size people, and no more than size+1 people, and there should be exactly groups groups total. For example, if there are $ 15 $ people and the desired number of groups is $ 4 $, then code should start with the following two variable assignments.\nstudents = 15 groups = 4 # more code goes here Your code should produce the following output for these values:\ngroups of 3 or 4 This is because the ideal group size for $ 4 $ groups out of $ 15 $ people is $ 3 $, and all groups should have either $ 3 $ or $ 4 $ members (in this case, one group of $ 3 $ and the rest groups of $ 4 $).\nWrite the rest of this Python program. Try different values for the students and groups variables to make sure that your answers are correct!\nAnswer 2.3 Answer One possible answer:\nstudents = 15 groups = 4 # more code goes here size = students // groups print(\"groups of \", end=\"\") print(size, end=\"\") print(\" or \", end=\"\") size = size + 1 print(size) The values in the students and groups variables can be changed. The key is to use the integer division operator to determine the size of each group, though some groups may have 1 more member if there is a remainder. You can even use the modulo operator to determine how many groups will get an extra member!\n",
    "description": "",
    "tags": null,
    "title": "Math Practice",
    "uri": "/02-numbers/08-math-practice/"
  },
  {
    "content": "Let’s try some simple practice problems. These problems are not graded - they are just for you to practice before doing the real exercises in the lab itself. You can find the answers below each question by clicking the button below each question.\n1.4 Reading Code Write the output that is displayed to the user after running the following Python code:\na = \"two\" b = a c = a print(c, end=\" \") c = \"one\" b = c a = \"three\" print(a, end=\" \") print(c) Answer 1.4 Answer The correct answer is:\ntwo three one 1.5 Constructing Code We want to write a program that produces the following output:\nand a 1 and a 2 and a 3 Rearrange the following Python statements to create a program that produces that output. You may not use all of these statements in your answer.\nx = \"1\" x = \"2\" x = \"3\" print(x) print(x) print(x) print(\"and a\", end=\" \") print(\"and a\", end=\" \") print(\"and a\", end=\" \") Answer 1.5 Answer One possible answer is given below:\nx = \"1\" print(\"and a\", end=\" \") print(x) x = \"2\" print(\"and a\", end=\" \") print(x) x = \"3\" print(\"and a\", end=\" \") print(x) 1.6 Writing Code We wish to write a Python program that displays the following output:\nabba banana bandana We currently have the following code:\na = \"abba\" b = \"banana\" c = \"bandana\" # more code goes here print(c, end=\" \") print(b, end=\" \") print(a) Complete the Python program by writing code where the # more code goes here comment is found so that the desired output is produced. See if you can do it by only using assignment statements and variables, without using any new string values. (Hint: you’ll need to create a least one new variable!)\nAnswer 1.6 Answer One possible answer is given below:\na = \"abba\" b = \"banana\" c = \"bandana\" # more code goes here temp = a a = c c = temp print(c, end=\" \") print(b, end=\" \") print(a) This problem demonstrates the typical process for swapping variables!\n",
    "description": "",
    "tags": null,
    "title": "Variables Practice",
    "uri": "/01-basic-python/08-variables-practice/"
  },
  {
    "content": "Python We introduced some basic statements and structures in the Python programming language. Let’s quickly review them!\nPrint Statement The print(expression) statement is used to print output on the terminal.\nIt will evaluate expression to a value, then display it to the screen. By default, it will add a newline to the end of the output. We can change that using the end parameter, such as print(expression, end=\"\") to remove the newline. Assignment Statement The assignment statement, like a = expression is used to create variables and store values in the variables.\nThe variable must be on the left side, and the right side must be an expression that evaluates to a single value. If the variable does not exist, it is created. Otherwise, the current value of the variable is replaced by the new value. Variable names must begin with a letter or underscore, and may only contain letters, numbers, and underscores. Variable names beginning with an underscore have a special meaning, so we won’t use them right now. ",
    "description": "",
    "tags": null,
    "title": "Summary",
    "uri": "/01-basic-python/09-summary/"
  },
  {
    "content": "In this lab, we covered several major important topics. Let’s quickly review them.\nData Types in Python str data type stores text (strings). Use str(expression) to convert an expression to a string if possible. int data type stores whole numbers (integers). Use int(expression) to convert an expression to an integer if possible. float data type stored decimal numbers (floating-point). Use float(expression) to convert an expression to a floating-point value, if possible. Math Operators in Python + Addition - Subtraction * Multiplication ** Exponentiation (Power) / Division // Integer Division % Modulo (the remainder of division) Python Order of operations Parentheses Exponentiation Multiplication, Division, Integer Division, and Modulo from left to right Addition and Subtraction from left to right ",
    "description": "",
    "tags": null,
    "title": "Summary",
    "uri": "/02-numbers/09-summary/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/"
  },
  {
    "content": "Chapter 0 Introduction Welcome to the Introduction to Python textbook!\n",
    "description": "",
    "tags": null,
    "title": "Introduction",
    "uri": "/00-introduction/"
  },
  {
    "content": "This textbook is used by CIS 115, CC 111, CC 711, and the Cyber Pipeline outreach program to teach basic Python programming to first-time programmers.\n",
    "description": "",
    "tags": null,
    "title": "Introduction to Python",
    "uri": "/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/"
  }
]
